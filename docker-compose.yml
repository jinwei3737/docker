version: "1.0"

services:
  nginx:
    image: nginx:alpine
    restart: always
    container_name: nginx
    ports:
      - "80:80"
      - "444:443"
    volumes:
      - /htdocs/www:/htdocs/www
      - /htdocs/log:/htdocs/log
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
    networks:
      - docker-network
    depends_on:
      - php81

  mysql:
    image: mysql:5.7.16
    restart: always
    container_name: mysql
    volumes:
      - /htdocs/mysql/mydir:/mydir
      - /htdocs/mysql/datadir:/var/lib/mysql
      - /htdocs/mysql/conf/my.cnf:/etc/my.cnf
      #      数据库还原目录 可将需要还原的sql文件放在这里
      - /htdocs/mysql/source:/docker-entrypoint-initdb.d
    environment:
      - "MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}"
    ports:
      - "3306:3306"
    networks:
      - docker-network

  redis:
    image: redis:latest
    restart: always
    container_name: redis
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:rw
      - /htdocs/redis/data:/data:rw
    command:
      /bin/bash -c "redis-server /usr/local/etc/redis/redis.conf"
    ports:
      - "6379:6379"
    networks:
      - docker-network

  php81:
    build:  #构建自定义镜像
      context: ./php81/  #指定dockerfile文件的路径
      dockerfile: Dockerfile  #指定dockerfile的文件名字
    image: php:8.1
    restart: always
    container_name: php81
    volumes:
      - /htdocs/www:/htdocs/www
      - ./php81/php.ini:/usr/local/etc/php/php.ini
    ports:
      - "9000:9000"
      - "9501:9501" # hyperf框架端口
    command: ["php-fpm"]
    depends_on:
      - mysql
    networks:
      - docker-network

  haproxy:
    build: #构建自定义镜像
      context: ./haproxy/  #指定dockerfile文件的路径
      dockerfile: Dockerfile  #指定dockerfile的文件名字
    restart: always
    container_name: haproxy
    ports:
      - "5670:5670"  # 负载均衡端口
      - "15670:15670"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg  # 配置文件
      - /htdocs/haproxy/log:/var/log
    depends_on:
      - rabbit1
      - rabbit2
    networks:
      - docker-network

  rabbit1:
    build: #构建自定义镜像
      context: ./rabbitmq/  #指定dockerfile文件的路径
      dockerfile: Dockerfile  #指定dockerfile的文件名字
    image: rabbitmq:3-management
    restart: always
    environment:
      - RABBITMQ_ERLANG_COOKIE=mycookie
      - RABBITMQ_LOOPBACK_GUEST=false
      - "RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}"
      - "RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}"
    volumes:
      - "/htdocs/rabbitmq1:/var/lib/rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"
    container_name: rabbit1
    hostname: rabbit1
    networks:
      - docker-network

  rabbit2:
    build: #构建自定义镜像
      context: ./rabbitmq/  #指定dockerfile文件的路径
      dockerfile: Dockerfile  #指定dockerfile的文件名字
    image: rabbitmq:3-management
    restart: always
    environment:
      - RABBITMQ_ERLANG_COOKIE=mycookie
      - RABBITMQ_LOOPBACK_GUEST=false
      - "RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}"
      - "RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}"
    volumes:
      - "/htdocs/rabbitmq2:/var/lib/rabbitmq"
    ports:
      - "5673:5672"
      - "15673:15672"
    container_name: rabbit2
    hostname: rabbit2
    depends_on:
      - rabbit1
    networks:
      - docker-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.2
    restart: always
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"  # 设置 elastic 用户的密码
      - xpack.security.enabled=true      # 启用安全功能
    volumes:
      - /htdocs/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - docker-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.2
    restart: always
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=2xr6klLc9liXiSeu4rrm  # 与 Elasticsearch 中设置的密码一致
    ports:
      - "5601:5601"
    networks:
      - docker-network
    depends_on:
      - elasticsearch

networks:
  docker-network:
    driver: bridge